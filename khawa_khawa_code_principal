(library(random)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% first_n_elements(khawa_khawa, Count, List, PrefixElements)
%
% Extracts the first Count elements of List (i.e. its prefix)
% and returns them in PrefixElements.
%
% Parameters:
%   khawa_khawa   - Extra context parameter (as required by the project).
%   Count         - The number of leading elements to extract.
%   List          - The input list from which to extract elements.
%   PrefixElements- The resulting list containing the first Count elements.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_first_n_elements(khawa_khawa, 0, _List, []) :- !.
khawa_khawa_first_n_elements(khawa_khawa, _Count, [], []) :- !.
khawa_khawa_first_n_elements(khawa_khawa, Count, [Head|Tail], [Head|Rest]) :-
    Count > 0,
    Count1 is Count - 1,
    khawa_khawa_first_n_elements(khawa_khawa, Count1, Tail, Rest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% select_weighted(khawa_khawa, Probabilities, Elements, ChosenElement)
%
% Selects one element from Elements according to the provided probability
% distribution in Probabilities. A random value is generated and the helper
% predicate select_by_prob/5 is used to determine the chosen element.
%
% Parameters:
%   khawa_khawa   - Extra context parameter.
%   Probabilities - List of probabilities for each element.
%   Elements      - List of candidate elements.
%   ChosenElement - The element selected based on the distribution.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_select_weighted(khawa_khawa, Probabilities, Elements, ChosenElement) :-
    random(RandomValue),
    khawa_khawa_select_by_prob(khawa_khawa, Probabilities, Elements, RandomValue, ChosenElement).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% select_by_prob(khawa_khawa, Probabilities, Elements, Random, ChosenElement)
%
% Helper predicate that traverses the list of probabilities and elements.
% It subtracts the probability from the random value until a threshold is met.
%
% Parameters:
%   khawa_khawa   - Extra context parameter.
%   Probabilities - List of probabilities.
%   Elements      - List of candidate elements.
%   Random        - The current random value.
%   ChosenElement - The selected element when threshold is reached.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_select_by_prob(khawa_khawa, [Prob|_], [Elem|_], Random, Elem) :-
    Random =< Prob, !.
khawa_khawa_select_by_prob(khawa_khawa, [Prob|RestProbs], [_|RestElems], Random, ChosenElement) :-
    Random1 is Random - Prob,
    khawa_khawa_select_by_prob(khawa_khawa, RestProbs, RestElems, Random1, ChosenElement).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% second_elements(khawa_khawa, ListOfPairs, Seconds)
%
% From a list where each element is a pair (or list with at least 2 elements),
% extracts the second element from each pair.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   ListOfPairs - A list of sublists (each representing a pair).
%   Seconds     - Resulting list of the second elements.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_second_elements(khawa_khawa, [], []).
khawa_khawa_second_elements(khawa_khawa, [[_, Second|_]|RestPairs], [Second|Seconds]) :-
   khawa_khawa_second_elements(khawa_khawa, RestPairs, Seconds).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% count_elem(khawa_khawa, Element, List, Count)
%
% Counts the number of times Element occurs in List.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   Element     - The element to count.
%   List        - The list in which to count occurrences.
%   Count       - The resulting count.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_count_elem(khawa_khawa, _Element, [], 0).
khawa_khawa_count_elem(khawa_khawa, Element, [Element|Rest], Count) :-
    khawa_khawa_count_elem(khawa_khawa, Element, Rest, Count1),
    Count is Count1 + 1.
khawa_khawa_count_elem(khawa_khawa, Element, [_|Rest], Count) :-
    khawa_khawa_count_elem(khawa_khawa, Element, Rest, Count).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rel_freq_stats(khawa_khawa, BigList, QueryList, Stats)
%
% Computes relative frequency statistics for each element in QueryList based on
% its occurrence in BigList. For each element, it calculates both the frequency
% and a variance term.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   BigList     - The list in which frequencies are computed.
%   QueryList   - The list of elements for which the stats are wanted.
%   Stats       - A list of triples: [Element, Frequency, VarianceTerm].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_rel_freq_stats(khawa_khawa, BigList, QueryList, Stats) :-
    length(BigList, Total),
    khawa_khawa_rel_freq_stats_internal(khawa_khawa, QueryList, BigList, Total, Stats).

% Helper predicate for rel_freq_stats/4.
khawa_khawa_rel_freq_stats_internal(khawa_khawa, [], _BigList, _Total, []).
khawa_khawa_rel_freq_stats_internal(khawa_khawa, [Element|RestQueries], BigList, Total, [[Element, Frequency, VarianceTerm]|StatsRest]) :-
    khawa_khawa_count_elem(khawa_khawa, Element, BigList, Count),
    ( Total =:= 0 -> Frequency = 0 ; Frequency is Count / Total ),
    ( Total =:= 0 -> VarianceTerm = 0 ; VarianceTerm is Frequency * (1 - Frequency) / Total ),
    khawa_khawa_rel_freq_stats_internal(khawa_khawa, RestQueries, BigList, Total, StatsRest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normal_pdf(khawa_khawa, X, PdfValue)
%
% Computes the value of the standard normal probability density function at X.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   X           - The point at which to evaluate the PDF.
%   PdfValue    - The resulting probability density.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_normal_pdf(khawa_khawa, X, PdfValue) :-
    PdfValue is 1 / sqrt(2 * 3.141592653589793) * exp(-X * X / 2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normal_area(khawa_khawa, A, B, NumIntervals, Area)
%
% Approximates the area under the standard normal curve between A and B using
% a Riemann sum with NumIntervals subintervals.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   A, B        - The interval limits.
%   NumIntervals- Number of subintervals to use.
%   Area        - The approximate area under the curve.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_normal_area(khawa_khawa, A, B, NumIntervals, Area) :-
    Delta is (B - A) / NumIntervals,
    khawa_khawa_normal_area_helper(khawa_khawa, A, Delta, NumIntervals, 0, Area).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normal_area_helper(khawa_khawa, CurrentX, Delta, NumIntervals, Accumulated, Area)
%
% Helper predicate to recursively compute the Riemann sum for normal_area/5.
%
% Parameters:
%   khawa_khawa  - Extra context parameter.
%   CurrentX     - The beginning of the current subinterval.
%   Delta        - Width of each subinterval.
%   NumIntervals - Remaining number of subintervals.
%   Accumulated  - Accumulated area so far.
%   Area         - Final computed area.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_normal_area_helper(khawa_khawa, _CurrentX, _Delta, 0, Accumulated, Accumulated).
khawa_khawa_normal_area_helper(khawa_khawa, CurrentX, Delta, NumIntervals, Accumulated, Area) :-
    NumIntervals > 0,
    Mid is CurrentX + Delta / 2,  % Midpoint of current subinterval
    khawa_khawa_normal_pdf(khawa_khawa, Mid, Y),
    NewAccumulated is Accumulated + Y * Delta,
    NextX is CurrentX + Delta,
    NextIntervals is NumIntervals - 1,
    khawa_khawa_normal_area_helper(khawa_khawa, NextX, Delta, NextIntervals, NewAccumulated, Area).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% distance_test(khawa_khawa, Variance, Result)
%
% Based on a given Variance, calculates a probability result using the normal_area
% approximation. If Variance is 0 the result is 1.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   Variance    - The variance value.
%   Result      - The resulting probability.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_distance_test(khawa_khawa, 0, 1).  % Special case: zero variance yields probability 1.
khawa_khawa_distance_test(khawa_khawa, Variance, Result) :-
    Bound is 0.1 / sqrt(Variance),
    khawa_khawa_normal_area(khawa_khawa, -Bound, Bound, 1000, Result).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% proba_of_strategy(khawa_khawa, StrategyList, Probabilities)
%
% Computes probabilities for each strategy defined in StrategyList. Each strategy is
% a triple [Element, Frequency, VarianceTerm]. The resulting list Probabilities holds
% the probability value obtained from distance_test for each strategy.
%
% Parameters:
%   khawa_khawa  - Extra context parameter.
%   StrategyList - List of strategies as triples.
%   Probabilities- List of computed probability values.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_proba_of_strategy(khawa_khawa, [], []).
khawa_khawa_proba_of_strategy(khawa_khawa, [[_, _, Variance]|RestStrategies], [Probability|RestProbabilities]) :-
    khawa_khawa_distance_test(khawa_khawa, Variance, Probability),
    khawa_khawa_proba_of_strategy(khawa_khawa, RestStrategies, RestProbabilities).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% matrix_A(khawa_khawa, MatrixA)
%
% Provides the constant matrix A used for computing the best
% response(Matrice de gain).
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   MatrixA     - The constant matrix used in response calculations.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_matrix_A(khawa_khawa, [
    [1, 0, 3, 4, 5],
    [3, 2, 0, 4, 5],
    [1, 5, 3, 0, 5],
    [1, 2, 7, 4, 0],
    [1, 2, 3, 9, 5]
]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% best_response(khawa_khawa, StrategyVector, MatrixA, Response)
%
% Determines the best response given a strategy vector and matrix A. This is done by
% transposing the matrix, computing dot products with the strategy vector, selecting the
% index of the maximum dot product, and constructing a one-hot response vector.
%
% Parameters:
%   khawa_khawa   - Extra context parameter.
%   StrategyVector- The vector representing the weighted strategy.
%   MatrixA       - The constant matrix A.
%   Response      - The generated response vector (one-hot encoded).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_best_response(khawa_khawa, StrategyVector, MatrixA, Response) :-
    khawa_khawa_transpose(khawa_khawa, MatrixA, TransposedA),
    maplist(khawa_khawa_dot_product_with_context(khawa_khawa, StrategyVector), TransposedA, DotProducts),
    khawa_khawa_max_index(khawa_khawa, DotProducts, MaxIndex),
    length(DotProducts, Length),
    khawa_khawa_zeros(khawa_khawa, Length, ZeroVector),
    khawa_khawa_set_at_index(khawa_khawa, ZeroVector, MaxIndex, 1, Response).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dot_product(khawa_khawa, Vector1, Vector2, Product)
%
% Computes the dot product of two numeric vectors.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   Vector1     - The first vector.
%   Vector2     - The second vector.
%   Product     - The resulting dot product.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_dot_product(khawa_khawa, [], [], 0).
khawa_khawa_dot_product(khawa_khawa, [X|Xs], [Y|Ys], Product) :-
    khawa_khawa_dot_product(khawa_khawa, Xs, Ys, PartialProduct),
    Product is X * Y + PartialProduct.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dot_product_with_context(khawa_khawa, FixedVector, OtherVector, Product)
%
% Wrapper predicate used with maplist to compute the dot product between a fixed vector
% and each vector in a list.
%
% Parameters:
%   khawa_khawa  - Extra context parameter.
%   FixedVector  - The fixed vector used in every dot product.
%   OtherVector  - A vector from the list.
%   Product      - The computed dot product.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_dot_product_with_context(khawa_khawa, FixedVector, OtherVector, Product) :-
    khawa_khawa_dot_product(khawa_khawa, FixedVector, OtherVector, Product).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% transpose(khawa_khawa, Matrix, Transposed)
%
% Transposes a matrix.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   Matrix      - The input matrix (list of lists).
%   Transposed  - The resulting transposed matrix.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_transpose(khawa_khawa, [], []).
khawa_khawa_transpose(khawa_khawa, [[]|_], []).
khawa_khawa_transpose(khawa_khawa, Matrix, [Row|Rows]) :-
    maplist(khawa_khawa_list_head(khawa_khawa), Matrix, Row),
    maplist(khawa_khawa_list_tail(khawa_khawa), Matrix, RestMatrix),
    khawa_khawa_transpose(khawa_khawa, RestMatrix, Rows).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% list_head(khawa_khawa, List, Head)
%
% Retrieves the first element of List.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List        - The input list.
%   Head        - The head (first element) of the list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_list_head(khawa_khawa, [Head|_], Head).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% list_tail(khawa_khawa, List, Tail)
%
% Retrieves the tail (all elements after the head) of List.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List        - The input list.
%   Tail        - The resulting tail of the list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_list_tail(khawa_khawa, [_|Tail], Tail).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% max_index(khawa_khawa, List, MaxIndex)
%
% Finds the index of the maximum element within List.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List        - The list of numbers.
%   MaxIndex    - The index (0-based) of the maximum value in List.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_max_index(khawa_khawa, [First|Rest], MaxIndex) :-
    khawa_khawa_max_index_helper(khawa_khawa, Rest, First, 0, 0, MaxIndex).

% Helper predicate for max_index/3.
khawa_khawa_max_index_helper(khawa_khawa, [], _CurrentMax, _CurrentPos, MaxIndex, MaxIndex).
khawa_khawa_max_index_helper(khawa_khawa, [H|T], CurrentMax, CurrentPos, CurrentMaxIndex, MaxIndex) :-
    NewPos is CurrentPos + 1,
    ( H > CurrentMax ->
        NewMax = H,
        NewMaxIndex = NewPos
    ;
        NewMax = CurrentMax,
        NewMaxIndex = CurrentMaxIndex
    ),
    khawa_khawa_max_index_helper(khawa_khawa, T, NewMax, NewPos, NewMaxIndex, MaxIndex).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% zeros(khawa_khawa, Length, ZeroList)
%
% Creates a list of Length zeros.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   Length      - The desired length of the zero list.
%   ZeroList    - The resulting list filled with zeros.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_zeros(khawa_khawa, 0, []).
khawa_khawa_zeros(khawa_khawa, N, [0|Rest]) :-
    N > 0,
    N1 is N - 1,
    khawa_khawa_zeros(khawa_khawa, N1, Rest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% set_at_index(khawa_khawa, List, Index, Value, NewList)
%
% Sets the element at the specified Index in List to Value,
% producing the modified NewList.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List        - The original list.
%   Index       - The 0-based index to update.
%   Value       - The value to place at the specified index.
%   NewList     - The modified list after updating.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_set_at_index(khawa_khawa, [_|Tail], 0, Value, [Value|Tail]).
khawa_khawa_set_at_index(khawa_khawa, [Head|Tail], Index, Value, [Head|NewTail]) :-
    Index > 0,
    Index1 is Index - 1,
    khawa_khawa_set_at_index(khawa_khawa, Tail, Index1, Value, NewTail).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% update(khawa_khawa, List0, List1, List2, ResultList)
%
% Updates List0 using List1 and List2 with the formula:
%   Result = Element_from_List0 + Element_from_List1 * (Element_from_List2 - Element_from_List0)
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List0       - The original list.
%   List1       - The list of scaling factors.
%   List2       - The target list.
%   ResultList  - The resulting updated list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_update(khawa_khawa, [], [], [], []).
khawa_khawa_update(khawa_khawa, [X0|Rest0], [X1|Rest1], [X2|Rest2], [R|ResultRest]) :-
    R is X0 + X1 * (X2 - X0),
    khawa_khawa_update(khawa_khawa, Rest0, Rest1, Rest2, ResultRest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% product(khawa_khawa, List, Product)
%
% Computes the product of all elements in List.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List        - The list of numbers.
%   Product     - The resulting product.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_product(khawa_khawa, [], 1).
khawa_khawa_product(khawa_khawa, [X|Xs], Product) :-
    khawa_khawa_product(khawa_khawa, Xs, PartialProduct),
    Product is X * PartialProduct.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% pairwise_multiply(khawa_khawa, List1, List2, ResultList)
%
% Performs element-wise multiplication of two lists, List1 and List2.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   List1       - The first list of numbers.
%   List2       - The second list of numbers.
%   ResultList  - The resulting list where each element is the product of the
%                 corresponding elements in List1 and List2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_pairwise_multiply(khawa_khawa, [], [], []).
khawa_khawa_pairwise_multiply(khawa_khawa, [A|As], [B|Bs], [Product|Rest]) :-
    Product is A * B,
    khawa_khawa_pairwise_multiply(khawa_khawa, As, Bs, Rest).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% create_list(khawa_khawa, N, Value, List)
%
% Creates a list of length N where every element is the given Value.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   N           - Desired length of the list.
%   Value       - The value to fill the list with.
%   List        - The resulting list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
khawa_khawa_create_list(khawa_khawa, 0, _Value, []).
khawa_khawa_create_list(khawa_khawa, N, Value, [Value|Rest]) :-
    N > 0,
    N1 is N - 1,
    khawa_khawa_create_list(khawa_khawa, N1, Value, Rest).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% play(khawa_khawa, GameHistory, Move)
%
% Main predicate that decides on the next move based on the GameHistory.
% Two strategies are implemented:
%   1. If fewer than 30 moves have occurred, choose a move at random using a fixed
%      probability distribution.
%   2. Otherwise, analyze the history to compute opponent move frequencies, determine
%      an optimal response through several computations (including best response and update),
%      and finally select a move based on the updated probabilities.
%
% Parameters:
%   khawa_khawa - Extra context parameter.
%   GameHistory - The list of past moves (each move is a [YourMove, OpponentMove] pair).
%   Move        - The chosen move (an integer between 1 and 5).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
joue(khawa_khawa, GameHistory, Move) :-
    length(GameHistory, Length),
    Length < 4,
    khawa_khawa_select_weighted(khawa_khawa, [0.03, 0.444, 0.203, 0.323, 0.0], [1,2,3,4,5], Move).

joue(khawa_khawa, GameHistory, Move) :-
     khawa_khawa_first_n_elements(khawa_khawa, 4, GameHistory, LastMoves),
    khawa_khawa_second_elements(khawa_khawa, LastMoves, OpponentMoves),
    khawa_khawa_rel_freq_stats(khawa_khawa, OpponentMoves, [1,2,3,4,5], Strategy),
   khawa_khawa_proba_of_strategy(khawa_khawa, Strategy, Probabilities),
    khawa_khawa_matrix_A(khawa_khawa, MatrixA),
    khawa_khawa_second_elements(khawa_khawa, Strategy, ExpectedStrategy),
    khawa_khawa_pairwise_multiply(khawa_khawa, ExpectedStrategy, Probabilities, WeightedStrategy),
    khawa_khawa_product(khawa_khawa, Probabilities, ProbaOfSuccess),
    khawa_khawa_create_list(khawa_khawa, 5, ProbaOfSuccess, ProbaOfSuccessVector),
    khawa_khawa_best_response(khawa_khawa, WeightedStrategy, MatrixA, Response),
    khawa_khawa_update(khawa_khawa, [0.03, 0.444, 0.203, 0.323, 0.0], ProbaOfSuccessVector, Response, Choice),
    khawa_khawa_select_weighted(khawa_khawa, Choice, [1,2,3,4,5], Move).







joue(nash_equilibrium, _, Coup) :-
    khawa_khawa_select_weighted(khawa_khawa,
                    [0,
                     0,
                     4/9,
                     2/9,
                     1/3], [1,2,3,4,5], Coup).









joue(stage_test, _, Coup) :-
    khawa_khawa_select_weighted(khawa_khawa,
        [0.03,
            0.444,
            0.203,
            0.323,
            0.0], [1,2,3,4,5], Coup).
